{"version":3,"sources":["wxValidator.js"],"names":["root","factory","define","amd","exports","module","wxValidator","global","window","this","src","rules","messages","key","split","str2array","console","log","result","Object","create","validate","globalFlag","singleRule","i","arr","flag","getCheckFunc","push","e","getError","len","length","msgList","singleRuleResult","singleRuleKey","getErrorAll","msgInfo","prototype","ruleMethods","required","val","phone","test","date","email","rule","register","ruleName","handler","singleValid","message","Error","msg"],"mappings":"CAAA,SAAAA,EAAAC,GACA,mBAAAC,QAAAA,OAAAC,IACAD,OAAA,WACA,OAAAD,EAAAD,KAEA,iBAAAI,SAAA,oBAAAC,OACAA,OAAAD,QAAAH,EAAAD,GAEAA,EAAAM,YAAAL,EAAAD,GARA,CAUA,oBAAAO,OAAAA,OAAA,oBAAAC,OAAAA,OAAAC,KAAA,SAAAD,GAUA,IAAAF,EAAA,SAAAI,EAAAC,EAAAC,GAqBAD,EAdA,SAAAA,GACA,IAAA,IAAAE,KAAAF,EACAA,EAAAE,GAAAF,EAAAE,GAAAC,MAAA,KAEA,OAAAH,EAUAI,CAAAJ,GAEAK,QAAAC,IAAAN,EAAA,QASA,IAAAO,EAAAC,OAAAC,OAAA,MAQAX,KAAAY,SAAA,WACA,IAAAC,GAAA,EACA,IAAA,IAAAT,KAAAH,EAAA,CACA,IACAa,EADAC,EAAA,EAEAC,EAAA,GACA,QAAA,IAAAd,EAAAE,GAAA,CACA,KAAAU,EAAAZ,EAAAE,GAAAW,MAEA,IAEA,IAAAE,EAAAjB,KAAAkB,aAAAJ,EAAAd,CAAAC,EAAAG,IAGA,GAAAa,IAAAJ,GAAA,GAGAG,EAAAG,KAAAF,GAEA,MAAAG,GAEA,SAIAX,EAAAL,GAAAY,GAIA,OADAT,QAAAC,IAAAC,EAAA,UACAI,GASAb,KAAAqB,SAAA,SAAAjB,GAGA,IAFA,IAAAkB,EAAAb,EAAAL,GAAAmB,OACAC,EAAA,GACAT,EAAA,EAAAA,EAAAO,EAAAP,IAAA,CACA,IAAAU,EAAAhB,EAAAL,GAAAW,GACAW,EAAAxB,EAAAE,GAAAW,GACAU,GACAD,EAAAL,KAAAhB,EAAAuB,EAAA,IAAAtB,IAGA,OAAA,EAAAoB,EAAAD,OAAAC,EAAA,MAQAxB,KAAA2B,YAAA,WACA,IAAAC,EAAA,GACA,IAAA,IAAAxB,KAAAF,EACA,OAAAF,KAAAqB,SAAAjB,KAAAwB,EAAAxB,GAAAJ,KAAAqB,SAAAjB,IAEA,OAAAwB,IAwDA,OAnDA/B,EAAAgC,UAAAC,YAAA,CACAC,SAAA,SAAAC,GACA,MAAA,IAAAA,IAAA,GAEAC,MAAA,SAAAD,GACA,MAAA,YAAAE,KAAAF,IAEAG,KAAA,SAAAH,GACA,MAAA,0DAAAE,KAAAF,IAEAI,MAAA,SAAAJ,GACA,MAAA,gFAAAE,KAAAF,KASAnC,EAAAgC,UAAAX,aAAA,SAAAmB,GACA,OAAArC,KAAA8B,YAAAO,IAQAxC,EAAAyC,SAAA,SAAAC,EAAAC,GACAxC,KAAA6B,UAAAC,YAAAS,GAAAC,GASA3C,EAAA4C,YAAA,SAAAT,EAAAK,EAAAK,GACA,IACA,IAAAjC,EAAAT,KAAA6B,UAAAX,aAAAmB,EAAArC,CAAAgC,GACA,MAAAZ,GACA,MAAA,IAAAuB,MAAA,8DAEA,MAAA,CACAlC,OAAAA,EACAmC,IAAA,GAAAnC,GAAAiC,GAAA,OAIA7C","file":"wxValidator.min.js","sourcesContent":["(function (root, factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n      define(function () {\r\n        return factory(root);\r\n      });\r\n    } else if (typeof exports === \"object\" && typeof module !== \"undefined\") {\r\n      module.exports = factory(root);\r\n    } else {\r\n      root.wxValidator = factory(root);\r\n    }\r\n  })(typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this, function (window) {\r\n  \r\n  \r\n  \r\n    /**\r\n     * constructor\r\n     * @param {Object} src 待验证的数据对象\r\n     * @param {Object} rules 与src键名一致的规则对象\r\n     * @param {Object} messages 错误信息对象，命名的方式为 规则名 + '.' + 数据对象的 key\r\n     */\r\n    var wxValidator = function (src, rules, messages) {\r\n  \r\n      /**\r\n       * 格式化对象，如：key值由'required|phone'变成 ['required', 'phone']\r\n       * @param {Object} rules \r\n       * @returns {Object}\r\n       */\r\n      var str2array = function (rules) {\r\n        for (var key in rules) {\r\n          rules[key] = rules[key].split('|')\r\n        }\r\n        return rules\r\n      }\r\n  \r\n      /**\r\n       * 转换成这样子\r\n       * rules = {\r\n       *    name: ['required'],\r\n       *    phone: ['required', 'phone']\r\n       * }\r\n       */\r\n      rules = str2array(rules)\r\n  \r\n      console.log(rules, '验证规则')\r\n  \r\n      /**\r\n       * 验证结果信息 经过validate（）处理后 跟 rules对象的key保持一致 like this\r\n       * result = {\r\n       *    name: [true], index 0 代表 ‘required’规则的验证结果\r\n       *    phone: [true, false] index 0 代表 ‘required’规则的验证结果 index 1 代表‘phone’规则的验证结果\r\n       * }\r\n       */\r\n      var result = Object.create(null)\r\n  \r\n  \r\n  \r\n      /**\r\n       * 验证\r\n       * @return {Boolean}\r\n       */\r\n      this.validate = function () {\r\n        var globalFlag = true //整体通过验证的标志\r\n        for (var key in src) {\r\n          var i = 0, //用来loop\r\n            singleRule, //单个验证的rule\r\n            arr = [] //记录rules对象中每个key,对应的每个rule所验证的结果\r\n          if (typeof rules[key] !== 'undefined') {\r\n            while (singleRule = rules[key][i++]) {\r\n              //为了防止使用者添加未注册的验证规则，用try catch控制整个流程\r\n              try {\r\n                //获得每个验证规则的结果\r\n                var flag = this.getCheckFunc(singleRule)(src[key])\r\n  \r\n                //假如有错，全局错误就是false\r\n                flag == false && (globalFlag = false)\r\n  \r\n                //记录每个规则对应的验证结果\r\n                arr.push(flag)\r\n  \r\n              } catch (e) {\r\n                //如果添加了未定义规则，跳过这次循环。\r\n                continue;\r\n              }\r\n            }\r\n            //将rules对象中每个key的一系列验证结果映射到result对象\r\n            result[key] = arr\r\n          }\r\n        }\r\n        console.log(result, '查看结果对象')\r\n        return globalFlag\r\n      }\r\n  \r\n  \r\n      /**\r\n       * 获取单个key的错误信息\r\n       * @param {String} key \r\n       * @returns {Mix} 如存在错误，返回错误信息数组，否则返回null\r\n       */\r\n      this.getError = function (key) {\r\n        var len = result[key].length\r\n        var msgList = []\r\n        for (var i = 0; i < len; i++) {\r\n          var singleRuleResult = result[key][i]\r\n          var singleRuleKey = rules[key][i]\r\n          if (!singleRuleResult) {\r\n            msgList.push(messages[singleRuleKey + '.' + key])\r\n          }\r\n        }\r\n        return msgList.length > 0 ? msgList : null\r\n      }\r\n  \r\n  \r\n      /**\r\n       * 获取所有错误信息\r\n       * @return {Object}\r\n       */\r\n      this.getErrorAll = function () {\r\n        var msgInfo = {}\r\n        for (var key in rules) {\r\n          this.getError(key) !== null && (msgInfo[key] = this.getError(key))\r\n        }\r\n        return msgInfo\r\n      }\r\n    }\r\n  \r\n    //基础验证方法系列\r\n    wxValidator.prototype.ruleMethods = {\r\n      'required': function (val) {\r\n        return val != '' && true\r\n      },\r\n      'phone': function (val) {\r\n        return /[0-9]{11}/.test(val)\r\n      },\r\n      'date': function (val) {\r\n        return /^[1-9]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/.test(val)\r\n      },\r\n      'email': function (val) {\r\n        return /^[a-z0-9]+([._\\\\-]*[a-z0-9])*@([a-z0-9]+[-a-z0-9]*[a-z0-9]+.){1,63}[a-z0-9]+$/.test(val)\r\n      }\r\n    }\r\n  \r\n    /**\r\n     * 通过验证规则，获取验证方法\r\n     * @param {String} rule \r\n     * @return {Function}\r\n     */\r\n    wxValidator.prototype.getCheckFunc = function (rule) {\r\n      return this.ruleMethods[rule]\r\n    }\r\n  \r\n    /**\r\n     * 注册验证规则\r\n     * @param {String} ruleName 规则名\r\n     * @param {Function} handler 控制器\r\n     */\r\n    wxValidator.register = function (ruleName, handler) {\r\n      this.prototype.ruleMethods[ruleName] = handler\r\n    }\r\n  \r\n    /**\r\n     * 对单一普通值快速验证\r\n     * @param {String, Number} val 所要验证的普通值\r\n     * @param {String} rule 验证规则\r\n     * @param {String} message 对应的错误信息\r\n     */\r\n    wxValidator.singleValid = function (val, rule, message) {\r\n      try {\r\n        var result = this.prototype.getCheckFunc(rule)(val)\r\n      } catch (e) {\r\n        throw new Error('wxValidator.singleValid can not call the rule of undefined')\r\n      }\r\n      return {\r\n        result: result,\r\n        msg: (result == false && message) || '正确'\r\n      }\r\n    }\r\n  \r\n    return wxValidator\r\n  \r\n  })\r\n  \r\n  "]}