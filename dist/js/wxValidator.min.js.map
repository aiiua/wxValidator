{"version":3,"sources":["wxValidator.js"],"names":["root","factory","module","exports","define","amd","wxValidator","global","window","this","src","rules","messages","key","split","str2Array","allErrors","Object","create","that","validate","globalFlag","singleRule","fn","errorMsg","i","ruleList","value","getCheckFunc","push","splice","console","warn","getError","prototype","ruleMethods","required","val","phone","test","date","email","rule","register","ruleName","handler","Error","singleValid","message","result","e","msg"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,OACAA,OAAAC,QAAAF,IACA,mBAAAG,QAAAA,OAAAC,IACAD,OAAA,GAAAH,GAEAD,EAAAM,YAAAL,IANA,CAQA,oBAAAM,OAAAA,OAAA,oBAAAC,OAAAA,OAAAC,KAAA,WAUA,IAAAH,EAAA,SAAAI,EAAAC,EAAAC,GAqBAD,EAdA,SAAAA,GACA,IAAA,IAAAE,KAAAF,EACAA,EAAAE,GAAAF,EAAAE,GAAAC,MAAA,KAEA,OAAAH,EAUAI,CAAAJ,GAIAF,KAAAO,UAAAC,OAAAC,OAAA,MAGA,IAAAC,EAAAV,KAMAA,KAAAW,SAAA,WACA,IAAAC,GAAA,EAEA,IAAA,IAAAR,KAAAH,EAAA,CACA,IACAY,EAKAC,EAAAC,EANAC,EAAA,EAIAC,EAAAf,EAAAE,GACAc,EAAAjB,EAAAG,GAGA,QAAA,IAAAa,EACA,KAAAJ,EAAAI,EAAAD,OACAF,EAAAd,KAAAmB,aAAAN,KAgBA,IAHAC,EAAAI,KAIAN,GAAA,EACAG,EAAAZ,EAAAU,EAAA,IAAAT,IAGAJ,KAAAO,UAAAH,KAAAJ,KAAAO,UAAAH,GAAA,KAAAgB,KAAAL,GAAA,sBAjBAE,EAAAI,OAAAL,EAAA,GACAM,QAAAC,KACA,eACAV,EACA,6EAoBA,OAAAD,GASAZ,KAAAwB,SAAA,SAAApB,GACA,OAAAM,EAAAH,UAAAH,IAAA,OA2DA,OArDAP,EAAA4B,UAAAC,YAAA,CACAC,SAAA,SAAAC,GACA,MAAA,KAAAA,IAAA,GAEAC,MAAA,SAAAD,GACA,MAAA,YAAAE,KAAAF,IAEAG,KAAA,SAAAH,GACA,MAAA,0DAAAE,KAAAF,IAEAI,MAAA,SAAAJ,GACA,MAAA,gFAAAE,KAAAF,KASA/B,EAAA4B,UAAAN,aAAA,SAAAc,GACA,OAAAjC,KAAA0B,YAAAO,IAQApC,EAAAqC,SAAA,SAAAC,EAAAC,GACA,GAAA,mBAAAA,EAAA,MAAA,IAAAC,MAAA,kCACArC,KAAAyB,UAAAC,YAAAS,GAAAC,GASAvC,EAAAyC,YAAA,SAAAV,EAAAK,EAAAM,GACA,IACA,IAAAC,EAAAxC,KAAAyB,UAAAN,aAAAc,EAAAjC,CAAA4B,GACA,MAAAa,GACA,MAAA,IAAAJ,MAAA,8DAGA,MAAA,CACAG,OAAAA,EACAE,KAAA,IAAAF,GAAAD,GAAA,OAIA1C","file":"wxValidator.min.js","sourcesContent":["(function (root, factory) {\r\n  if (typeof module === \"object\") {\r\n    module.exports = factory();\r\n  } else if (typeof define === 'function' && define.amd) {\r\n    define([], factory);\r\n  } else {\r\n    root.wxValidator = factory();\r\n  }\r\n})(typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this, function () {\r\n\r\n\r\n\r\n  /**\r\n   * constructor\r\n   * @param {Object} src 待验证的数据对象\r\n   * @param {Object} rules 与src键名一致的规则对象\r\n   * @param {Object} messages 错误信息对象，命名的方式为 规则名 + '.' + 数据对象的 key\r\n   */\r\n  var wxValidator = function (src, rules, messages) {\r\n\r\n    /**\r\n     * 格式化对象，如：key值由'required|phone'变成 ['required', 'phone']\r\n     * @param {Object} rules \r\n     * @returns {Object}\r\n     */\r\n    var str2Array = function (rules) {\r\n      for (var key in rules) {\r\n        rules[key] = rules[key].split('|')\r\n      }\r\n      return rules\r\n    }\r\n\r\n    /**\r\n     * 转换成这样子\r\n     * rules = {\r\n     *    name: ['required'],\r\n     *    phone: ['required', 'phone']\r\n     * }\r\n     */\r\n    rules = str2Array(rules)\r\n\r\n\r\n    //所有错误信息\r\n    this.allErrors = Object.create(null)\r\n\r\n    //bind instance\r\n    var that = this\r\n\r\n    /**\r\n     * 验证\r\n     * @return {Boolean}\r\n     */\r\n    this.validate = function () {\r\n      var globalFlag = true //整体通过验证的标志\r\n\r\n      for (var key in src) {\r\n        var i = 0, //用来loop\r\n          singleRule //单个验证的rule\r\n         \r\n\r\n        var ruleList = rules[key]\r\n        var value = src[key]\r\n        var flag, fn, errorMsg\r\n\r\n        if (typeof ruleList !== 'undefined') {\r\n          while (singleRule = ruleList[i++]) {\r\n            fn = this.getCheckFunc(singleRule)\r\n\r\n            //使用者添加未注册的验证规则, 直接移除，进入下一个loop\r\n            if (!fn) {\r\n              ruleList.splice(i, 1)\r\n              console.warn(\r\n                'Rule name: \\\"' + \r\n                singleRule + \r\n                '\\\", please don\\'t add the rule of unregistered for data that it be verify'\r\n              )\r\n              continue;\r\n            }\r\n\r\n            flag = fn(value)\r\n           \r\n            //假如有错，全局错误就是false\r\n            if (flag === false) {\r\n              globalFlag = false\r\n              errorMsg = messages[singleRule + '.' + key];\r\n\r\n              //注入错误信息\r\n              ( this.allErrors[key] || (this.allErrors[key] = []) ).push(errorMsg || '默认错误(未添加自定义错误信息)')\r\n            }\r\n\r\n          }\r\n        }\r\n      }\r\n\r\n      return globalFlag\r\n    }\r\n\r\n\r\n    /**\r\n     * 获取单个key的错误信息\r\n     * @param {String} key \r\n     * @returns {Mixed} 如存在错误，返回错误信息数组，否则返回null\r\n     */\r\n    this.getError = function (key) {\r\n      return that.allErrors[key] || null\r\n    }\r\n\r\n  }\r\n\r\n  //基础验证方法系列\r\n  wxValidator.prototype.ruleMethods = {\r\n    'required': function (val) {\r\n      return val !== '' && true\r\n    },\r\n    'phone': function (val) {\r\n      return /[0-9]{11}/.test(val)\r\n    },\r\n    'date': function (val) {\r\n      return /^[1-9]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/.test(val)\r\n    },\r\n    'email': function (val) {\r\n      return /^[a-z0-9]+([._\\\\-]*[a-z0-9])*@([a-z0-9]+[-a-z0-9]*[a-z0-9]+.){1,63}[a-z0-9]+$/.test(val)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 通过验证规则，获取验证方法\r\n   * @param {String} rule \r\n   * @return {Function}\r\n   */\r\n  wxValidator.prototype.getCheckFunc = function (rule) {\r\n    return this.ruleMethods[rule]\r\n  }\r\n\r\n  /**\r\n   * 注册验证规则\r\n   * @param {String} ruleName 规则名\r\n   * @param {Function} handler 控制器\r\n   */\r\n  wxValidator.register = function (ruleName, handler) {\r\n    if (typeof handler !== 'function') throw new Error('The handler must be a function');\r\n    this.prototype.ruleMethods[ruleName] = handler;\r\n  }\r\n\r\n  /**\r\n   * 对单一普通值快速验证\r\n   * @param {String, Number} val 所要验证的普通值\r\n   * @param {String} rule 验证规则\r\n   * @param {String} message 对应的错误信息\r\n   */\r\n  wxValidator.singleValid = function (val, rule, message) {\r\n    try {\r\n      var result = this.prototype.getCheckFunc(rule)(val)\r\n    } catch (e) {\r\n      throw new Error('wxValidator.singleValid can not call the rule of undefined')\r\n    }\r\n\r\n    return {\r\n      result: result,\r\n      msg: (result === false && message) || '正确'\r\n    }\r\n  }\r\n\r\n  return wxValidator\r\n\r\n})"]}