{"version":3,"sources":["wxValidator.js"],"names":["root","factory","define","amd","exports","module","console","log","wxValidator","global","window","this","src","rules","messages","key","split","str2array","result","Object","create","allErrors","that","validate","globalFlag","singleRule","flag","i","arr","ruleList","value","getCheckFunc","e","splice","errorMsg","push","getError","prototype","ruleMethods","required","val","phone","test","date","email","rule","register","ruleName","handler","singleValid","message","Error","msg"],"mappings":"CAAA,SAAAA,EAAAC,GACA,mBAAAC,QAAAA,OAAAC,IACAD,OAAA,WACA,OAAAD,EAAAD,KAEA,iBAAAI,SAAA,oBAAAC,QACAC,QAAAC,IAAA,SACAF,OAAAD,QAAAH,EAAAD,IAEAA,EAAAQ,YAAAP,EAAAD,GATA,CAWA,oBAAAS,OAAAA,OAAA,oBAAAC,OAAAA,OAAAC,KAAA,SAAAD,GAUA,IAAAF,EAAA,SAAAI,EAAAC,EAAAC,GAqBAD,EAdA,SAAAA,GACA,IAAA,IAAAE,KAAAF,EACAA,EAAAE,GAAAF,EAAAE,GAAAC,MAAA,KAEA,OAAAH,EAUAI,CAAAJ,GAUA,IAAAK,EAAAC,OAAAC,OAAA,MAIAT,KAAAU,UAAAF,OAAAC,OAAA,MAGA,IAAAE,EAAAX,KAMAA,KAAAY,SAAA,WACA,IAAAC,GAAA,EAEA,IAAA,IAAAT,KAAAH,EAAA,CACA,IACAa,EAKAC,EANAC,EAAA,EAEAC,EAAA,GAEAC,EAAAhB,EAAAE,GACAe,EAAAlB,EAAAG,GAGA,QAAA,IAAAc,EAAA,CACA,KAAAJ,EAAAI,EAAAF,MAAA,CAGA,IAGAD,EAAAf,KAAAoB,aAAAN,EAAAd,CAAAmB,GACA,MAAAE,GAEAH,EAAAI,OAAAN,EAAA,GAGA,SAIA,IAAA,IAAAD,EAAA,CACAF,GAAA,EAGA,IAAAU,EAAApB,EAAAW,EAAA,IAAAV,IACAJ,KAAAU,UAAAN,KAAAJ,KAAAU,UAAAN,GAAA,KAAAoB,KAAAD,GAIAN,EAAAO,KAAAT,GAIAR,EAAAH,GAAAa,GAIA,OAAAJ,GASAb,KAAAyB,SAAA,SAAArB,GACA,OAAAO,EAAAD,UAAAN,IAAA,OAyDA,OAnDAP,EAAA6B,UAAAC,YAAA,CACAC,SAAA,SAAAC,GACA,MAAA,KAAAA,IAAA,GAEAC,MAAA,SAAAD,GACA,MAAA,YAAAE,KAAAF,IAEAG,KAAA,SAAAH,GACA,MAAA,0DAAAE,KAAAF,IAEAI,MAAA,SAAAJ,GACA,MAAA,gFAAAE,KAAAF,KASAhC,EAAA6B,UAAAN,aAAA,SAAAc,GACA,OAAAlC,KAAA2B,YAAAO,IAQArC,EAAAsC,SAAA,SAAAC,EAAAC,GACArC,KAAA0B,UAAAC,YAAAS,GAAAC,GASAxC,EAAAyC,YAAA,SAAAT,EAAAK,EAAAK,GACA,IACA,IAAAhC,EAAAP,KAAA0B,UAAAN,aAAAc,EAAAlC,CAAA6B,GACA,MAAAR,GACA,MAAA,IAAAmB,MAAA,8DAEA,MAAA,CACAjC,OAAAA,EACAkC,KAAA,IAAAlC,GAAAgC,GAAA,OAIA1C","file":"wxValidator.min.js","sourcesContent":["(function (root, factory) {\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(function () {\r\n      return factory(root);\r\n    });\r\n  } else if (typeof exports === \"object\" && typeof module !== \"undefined\") {\r\n    console.log('hello')\r\n    module.exports = factory(root);\r\n  } else {\r\n    root.wxValidator = factory(root);\r\n  }\r\n})(typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this, function (window) {\r\n\r\n\r\n\r\n  /**\r\n   * constructor\r\n   * @param {Object} src 待验证的数据对象\r\n   * @param {Object} rules 与src键名一致的规则对象\r\n   * @param {Object} messages 错误信息对象，命名的方式为 规则名 + '.' + 数据对象的 key\r\n   */\r\n  var wxValidator = function (src, rules, messages) {\r\n\r\n    /**\r\n     * 格式化对象，如：key值由'required|phone'变成 ['required', 'phone']\r\n     * @param {Object} rules \r\n     * @returns {Object}\r\n     */\r\n    var str2array = function (rules) {\r\n      for (var key in rules) {\r\n        rules[key] = rules[key].split('|')\r\n      }\r\n      return rules\r\n    }\r\n\r\n    /**\r\n     * 转换成这样子\r\n     * rules = {\r\n     *    name: ['required'],\r\n     *    phone: ['required', 'phone']\r\n     * }\r\n     */\r\n    rules = str2array(rules)\r\n\r\n\r\n    /**\r\n     * 验证结果信息 经过validate（）处理后 跟 rules对象的key保持一致 like this\r\n     * result = {\r\n     *    name: [true], index 0 代表 ‘required’规则的验证结果\r\n     *    phone: [true, false] index 0 代表 ‘required’规则的验证结果 index 1 代表‘phone’规则的验证结果\r\n     * }\r\n     */\r\n    var result = Object.create(null)\r\n\r\n    \r\n    //所有错误信息\r\n    this.allErrors = Object.create(null)\r\n    \r\n    //bind instance\r\n    var that = this\r\n      \r\n    /**\r\n     * 验证\r\n     * @return {Boolean}\r\n     */\r\n    this.validate = function () {\r\n      var globalFlag = true //整体通过验证的标志\r\n\r\n      for (var key in src) {\r\n        var i = 0, //用来loop\r\n          singleRule, //单个验证的rule\r\n          arr = [] //记录rules对象中每个key,对应的每个rule所验证的结果\r\n\r\n        var ruleList = rules[key]\r\n        var value = src[key]\r\n        var flag\r\n\r\n        if (typeof ruleList !== 'undefined') {\r\n          while (singleRule = ruleList[i++]) {\r\n\r\n            //为了防止使用者添加未注册的验证规则，用try catch控制整个流程\r\n            try {\r\n\r\n              //获得每个验证规则的结果\r\n              flag = this.getCheckFunc(singleRule)(value)\r\n            } catch (e) {\r\n              //移除未注册的规则\r\n              ruleList.splice(i, 1)\r\n\r\n              //如果添加了未定义规则，跳过这次循环。\r\n              continue;\r\n            }\r\n\r\n            //假如有错，全局错误就是false\r\n            if (flag === false) {\r\n              globalFlag = false\r\n\r\n              //注入错误信息\r\n              var errorMsg = messages[singleRule + '.' + key];\r\n              ( this.allErrors[key] || (this.allErrors[key] = []) ).push(errorMsg)\r\n            } \r\n\r\n            //记录每个规则对应的验证结果\r\n            arr.push(flag)\r\n          }\r\n\r\n          //将rules对象中每个key的一系列验证结果映射到result对象\r\n          result[key] = arr\r\n        }\r\n      }\r\n\r\n      return globalFlag\r\n    }\r\n\r\n\r\n    /**\r\n     * 获取单个key的错误信息\r\n     * @param {String} key \r\n     * @returns {Mixed} 如存在错误，返回错误信息数组，否则返回null\r\n     */\r\n    this.getError = function (key) {\r\n      return that.allErrors[key] || null\r\n    }\r\n\r\n  }\r\n\r\n  //基础验证方法系列\r\n  wxValidator.prototype.ruleMethods = {\r\n    'required': function (val) {\r\n      return val !== '' && true\r\n    },\r\n    'phone': function (val) {\r\n      return /[0-9]{11}/.test(val)\r\n    },\r\n    'date': function (val) {\r\n      return /^[1-9]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/.test(val)\r\n    },\r\n    'email': function (val) {\r\n      return /^[a-z0-9]+([._\\\\-]*[a-z0-9])*@([a-z0-9]+[-a-z0-9]*[a-z0-9]+.){1,63}[a-z0-9]+$/.test(val)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 通过验证规则，获取验证方法\r\n   * @param {String} rule \r\n   * @return {Function}\r\n   */\r\n  wxValidator.prototype.getCheckFunc = function (rule) {\r\n    return this.ruleMethods[rule]\r\n  }\r\n\r\n  /**\r\n   * 注册验证规则\r\n   * @param {String} ruleName 规则名\r\n   * @param {Function} handler 控制器\r\n   */\r\n  wxValidator.register = function (ruleName, handler) {\r\n    this.prototype.ruleMethods[ruleName] = handler\r\n  }\r\n\r\n  /**\r\n   * 对单一普通值快速验证\r\n   * @param {String, Number} val 所要验证的普通值\r\n   * @param {String} rule 验证规则\r\n   * @param {String} message 对应的错误信息\r\n   */\r\n  wxValidator.singleValid = function (val, rule, message) {\r\n    try {\r\n      var result = this.prototype.getCheckFunc(rule)(val)\r\n    } catch (e) {\r\n      throw new Error('wxValidator.singleValid can not call the rule of undefined')\r\n    }\r\n    return {\r\n      result: result,\r\n      msg: (result === false && message) || '正确'\r\n    }\r\n  }\r\n\r\n  return wxValidator\r\n\r\n})\r\n\r\n"]}