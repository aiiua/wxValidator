{"version":3,"sources":["wxValidator.js"],"names":["wxValidator","src","rules","messages","key","split","str2array","console","log","result","Object","create","this","validate","globalFlag","singleRule","i","arr","flag","getCheckFunc","push","e","getError","len","length","msgList","singleRuleResult","singleRuleKey","getErrorAll","msgInfo","prototype","ruleMethods","required","val","phone","test","date","email","rule","register","ruleName","handler","singleValid","message","Error","msg"],"mappings":"AAOA,IAAAA,YAAA,SAAAC,EAAAC,EAAAC,GAqBAD,EAdA,SAAAA,GACA,IAAA,IAAAE,KAAAF,EACAA,EAAAE,GAAAF,EAAAE,GAAAC,MAAA,KAEA,OAAAH,EAUAI,CAAAJ,GAEAK,QAAAC,IAAAN,EAAA,QASA,IAAAO,EAAAC,OAAAC,OAAA,MAQAC,KAAAC,SAAA,WACA,IAAAC,GAAA,EACA,IAAA,IAAAV,KAAAH,EAAA,CACA,IACAc,EADAC,EAAA,EAEAC,EAAA,GACA,QAAA,IAAAf,EAAAE,GAAA,CACA,KAAAW,EAAAb,EAAAE,GAAAY,MAEA,IAEA,IAAAE,EAAAN,KAAAO,aAAAJ,EAAAH,CAAAX,EAAAG,IAGA,GAAAc,IAAAJ,GAAA,GAGAG,EAAAG,KAAAF,GAEA,MAAAG,GAEAJ,EAAAG,MAAA,GACA,SAIAX,EAAAL,GAAAa,GAIA,OADAV,QAAAC,IAAAC,EAAA,UACAK,GASAF,KAAAU,SAAA,SAAAlB,GAGA,IAFA,IAAAmB,EAAAd,EAAAL,GAAAoB,OACAC,EAAA,GACAT,EAAA,EAAAA,EAAAO,EAAAP,IAAA,CACA,IAAAU,EAAAjB,EAAAL,GAAAY,GACAW,EAAAzB,EAAAE,GAAAY,GACAU,GACAD,EAAAL,KAAAjB,EAAAwB,EAAA,IAAAvB,IAGA,OAAA,EAAAqB,EAAAD,OAAAC,EAAA,MAQAb,KAAAgB,YAAA,WACA,IAAAC,EAAA,GACA,IAAA,IAAAzB,KAAAF,EACA,OAAAU,KAAAU,SAAAlB,KAAAyB,EAAAzB,GAAAQ,KAAAU,SAAAlB,IAEA,OAAAyB,IAKA7B,YAAA8B,UAAAC,YAAA,CACAC,SAAA,SAAAC,GACA,MAAA,IAAAA,IAAA,GAEAC,MAAA,SAAAD,GACA,MAAA,YAAAE,KAAAF,IAEAG,KAAA,SAAAH,GACA,MAAA,0DAAAE,KAAAF,IAEAI,MAAA,SAAAJ,GACA,MAAA,gFAAAE,KAAAF,KASAjC,YAAA8B,UAAAX,aAAA,SAAAmB,GACA,OAAA1B,KAAAmB,YAAAO,IAQAtC,YAAAuC,SAAA,SAAAC,EAAAC,GACA7B,KAAAkB,UAAAC,YAAAS,GAAAC,GASAzC,YAAA0C,YAAA,SAAAT,EAAAK,EAAAK,GACA,IACA,IAAAlC,EAAAG,KAAAkB,UAAAX,aAAAmB,EAAA1B,CAAAqB,GACA,MAAAZ,GACA,MAAA,IAAAuB,MAAA,8DAEA,MAAA,CACAnC,OAAAA,EACAoC,IAAA,GAAApC,GAAAkC,GAAA","file":"wxValidator.min.js","sourcesContent":["\r\n/**\r\n * constructor\r\n * @param {Object} src 待验证的数据对象\r\n * @param {Object} rules 与src键名一致的规则对象\r\n * @param {Object} messages 错误信息对象，命名的方式为 规则名 + '.' + 数据对象的 key\r\n */\r\nvar wxValidator = function (src, rules, messages) {\r\n\r\n    /**\r\n     * 格式化对象，如：key值由'required|phone'变成 ['required', 'phone']\r\n     * @param {Object} rules \r\n     * @returns {Object}\r\n     */\r\n    var str2array = function (rules) {\r\n        for (var key in rules) {\r\n            rules[key] = rules[key].split('|')\r\n        }\r\n        return rules\r\n    }\r\n\r\n    /**\r\n     * 转换成这样子\r\n     * rules = {\r\n     *    name: ['required'],\r\n     *    phone: ['required', 'phone']\r\n     * }\r\n     */\r\n    rules = str2array(rules)\r\n    \r\n    console.log(rules, '验证规则')\r\n\r\n     /**\r\n     * 验证结果信息 经过validate（）处理后 跟 rules对象的key保持一致 like this\r\n     * result = {\r\n     *    name: [true], index 0 代表 ‘required’规则的验证结果\r\n     *    phone: [true, false] index 0 代表 ‘required’规则的验证结果 index 1 代表‘phone’规则的验证结果\r\n     * }\r\n     */\r\n    var result = Object.create(null)\r\n    \r\n\r\n\r\n    /**\r\n     * 验证\r\n     * @return {Boolean}\r\n     */\r\n    this.validate = function () {\r\n        var globalFlag = true //整体通过验证的标志\r\n        for (var key in src) {\r\n            var i = 0, //用来loop\r\n                singleRule, //单个验证的rule\r\n                arr = [] //记录rules对象中每个key,对应的每个rule所验证的结果\r\n            if (typeof rules[key] !== 'undefined') {\r\n                while (singleRule = rules[key][i++]) {\r\n                    //为了防止使用者添加未注册的验证规则，用try catch控制整个流程\r\n                    try {\r\n                        //获得每个验证规则的结果\r\n                        var flag = this.getCheckFunc(singleRule)(src[key])\r\n    \r\n                        //假如有错，全局错误就是false\r\n                        flag == false && (globalFlag = false)\r\n    \r\n                        //记录每个规则对应的验证结果\r\n                        arr.push(flag)\r\n    \r\n                    } catch (e) {\r\n                        //如果添加了未定义规则，则该规则的验证结果为false\r\n                        arr.push(false)\r\n                        continue;\r\n                    }\r\n                }\r\n                //将rules对象中每个key的一系列验证结果映射到result对象\r\n                result[key] = arr\r\n            }\r\n        }\r\n        console.log(result, '查看结果对象')\r\n        return globalFlag\r\n    }\r\n\r\n\r\n    /**\r\n     * 获取单个key的错误信息\r\n     * @param {String} key \r\n     * @returns {Mix} 如存在错误，返回错误信息数组，否则返回null\r\n     */\r\n    this.getError = function (key) {\r\n        var len = result[key].length\r\n        var msgList = []\r\n        for(var i = 0; i < len; i++) {\r\n            var singleRuleResult = result[key][i]\r\n            var singleRuleKey = rules[key][i]\r\n            if (!singleRuleResult) {\r\n                msgList.push(messages[singleRuleKey + '.' + key])\r\n            }\r\n        }\r\n        return msgList.length > 0 ? msgList : null\r\n    }\r\n\r\n\r\n    /**\r\n     * 获取所有错误信息\r\n     * @return {Object}\r\n     */\r\n    this.getErrorAll = function () {\r\n        var msgInfo = {}\r\n        for (var key in  rules) {\r\n            this.getError(key) !== null && (msgInfo[key] = this.getError(key))\r\n        }\r\n        return msgInfo\r\n    }\r\n}\r\n\r\n//基础验证方法系列\r\nwxValidator.prototype.ruleMethods = {\r\n    'required': function (val) {\r\n        return val != '' && true\r\n    },\r\n    'phone': function (val) {\r\n        return /[0-9]{11}/.test(val)\r\n    },\r\n    'date': function (val) {\r\n        return /^[1-9]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/.test(val)\r\n    },\r\n    'email': function (val) {\r\n        return /^[a-z0-9]+([._\\\\-]*[a-z0-9])*@([a-z0-9]+[-a-z0-9]*[a-z0-9]+.){1,63}[a-z0-9]+$/.test(val)\r\n    }\r\n}\r\n\r\n/**\r\n * 通过验证规则，获取验证方法\r\n * @param {String} rule \r\n * @return {Function}\r\n */\r\nwxValidator.prototype.getCheckFunc = function(rule) {\r\n    return this.ruleMethods[rule]\r\n}\r\n\r\n/**\r\n * 注册验证规则\r\n * @param {String} ruleName 规则名\r\n * @param {Function} handler 控制器\r\n */\r\nwxValidator.register = function (ruleName, handler) {\r\n    this.prototype.ruleMethods[ruleName] = handler\r\n}\r\n\r\n/**\r\n * 对单一普通值快速验证\r\n * @param {String, Number} val 所要验证的普通值\r\n * @param {String} rule 验证规则\r\n * @param {String} message 对应的错误信息\r\n */\r\nwxValidator.singleValid = function (val, rule, message) {\r\n    try {\r\n        var result = this.prototype.getCheckFunc(rule)(val)\r\n    } catch (e) {\r\n        throw new Error('wxValidator.singleValid can not call the rule of undefined')\r\n    }\r\n    return {\r\n        result: result,\r\n        msg: (result == false && message) || '正确'\r\n    }\r\n}\r\n\r\n// module.exports = wxValidator"]}